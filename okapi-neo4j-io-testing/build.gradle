import ch.kk7.gradle.spawn.KillTask
import ch.kk7.gradle.spawn.SpawnTask

apply plugin: 'ch.kk7.spawn'

description = 'Okapi - Neo4j IO test utils'

sourceSets {
    services {}
}

dependencies {
    compile project(':okapi-neo4j-io')
    compile project(':okapi-testing')

    compile group: 'org.bouncycastle', name: 'bctls-jdk15on', version: ver.bctls

    servicesCompile group: 'org.neo4j.test', name: 'neo4j-harness',            version: ver.neo4j.harness
    servicesCompile group: 'org.neo4j.test', name: 'neo4j-harness-enterprise', version: ver.neo4j.harness
}

def neo4jLauncher(String launcher, int instances, String starter, String stopper, String status) {
    task(starter, type: SpawnTask) {
        description "Launches $launcher (x$instances) in a separate JVM"
        group "services"

        dependsOn project.sourceSets.services.runtimeClasspath

        String java = System.getProperty('java.home') + '/bin/java'
        String classpath = project.sourceSets.services.runtimeClasspath.collect { it.absolutePath }.join(':')
        String main = "org.opencypher.testing.services.$launcher"
        String marker = 'neo4j started'

        commandLine = [java, '-cp', classpath, main, marker, instances.toString()]
        waitFor     = marker
        doLast { println getStdoutFile().text }
    }

    task(stopper, type: KillTask) {
        description "Stops $launcher"
        group "services"
        kills tasks[starter]
    }

    task(status) {
        description "Prints status on $launcher"
        group "services"
        doLast {
            def res = [pid: 'unknown', status: 'unknown']
            if (tasks[starter].pidFile.exists()) {
                res.pid    = tasks[starter].pidFile.text
                res.status = tasks[starter].kill('-0', res.pid) ? 'running' : 'stopped'
            }
            println res
        }
    }
}

neo4jLauncher('Neo4jEnterprise', 1, 'neo4jStart', 'neo4jStop', 'neo4jStatus')
neo4jLauncher('Neo4jCommunity', 2, 'neo4jStartTwoInstances', 'neo4jStopTwoInstances', 'neo4jStatusTwoInstances')

tasks.test.dependsOn(tasks.neo4jStart)
tasks.test.finalizedBy(tasks.neo4jStop)


